# Lab 4 - Rayden Y Chia

Q1.	The `MPBOOTPHYS` macro is needed because `mpentry.S` is linked at high addresses but gets loaded by `boot_aps()` at the low address `MPENTRY_ADDR`. The bootloader doesn't need a macro like this because it is linked and loaded at the same low address (`0x00007c00`). You can verify this by running `objdump -h obj/boot/boot.out` and comparing the VMA and LMA columns. If `mpentry.S` didn't make use of a macro like `MPBOOTPHYS` then the symbols it references wouldn't work at runtime because they have been addressed (linked) at high addresses and the macro translates them to addresses relative to where the code actually gets loaded, namely `MPENTRY_ADDR`.

Q2. 	We still need separate stacks for each CPU because during a trap/interrupt, the trapframe is pushed onto the stack **without holding the kernel lock**. This means that, say CPU 1 enters the kernel on a system call and while it is in the kernel, CPU 2 attempts to enter the kernel on a timer interrupt. CPU 2 can't enter the kernel, it will be spinning at the lock we just added in `trap()`. However, it will have pushed its trap frame **on top of the trap frame already pushed by CPU 1**. This of course means that when CPU 1 returns to user mode, it will pop off CPU 2's frame and return in that environment instead of its own.

Q3.	The pointer to the `struct Env` about to be run, works after we switch page tables because all environment page directories share certain mappings. That pointer points somewhere in `UENVS`, which is shared. The `envs` array is allocated and mapped to `UENVS` in `mem_init()` and those mappings are then **copied to all new page directories** in `env_setup_vm()`.

	User environments have their registers saved by the kernel because they need to be able to resume seamlessly (this includes getting back to the right stack `esp` and at the right instruction `eip`) and their interruption is not always predictable. Processes keep temporary data and variables in registers and the process assumes that when it returns, all those values will still be there. It's a like the caller/callee save calling convention except here it is for interrupting the whole process.

Q4.	The registers are saved on the user environment's stack as part of the trapframe constructed by the `int` instruction and the code in `alltraps`. To restore the state of a new process, JOS uses the `env_pop_tf()` function, which switches first to the new process' stack and the pops all the registers in place.


Challenge Problem: Nr. 8 (`ipc_send` without `while` loop)

I modified the IPC send/recv calls to function in a way similar to a message queue: if there are multiple calls, it is stored in a linked list queue in the Env struct and each Env is processed as the chain is traversed.

I made the syscall `sys_ipc_try_send` call `sys_ipc_send`. The functional difference is as the name implies: `sys_ipc_send` will always succeed (eventually), except when there is some error in the input, or a memory error. Unlike `sys_ipc_try_send`, `sys_ipc_send` will not fail because the target is not blocked and waiting for an IPC. Therefore, `ipc_send` does not have to loop. It only needs to make one call to `sys_ipc_send`.

`sys_ipc_send` accomplishes this by itself blocking if the target is not blocked and waiting to receive an IPC. Since the fields in the target environment can't be assumed to be available for storing the IPC data, new Env fields that I defined are used to store the data in the source environment. It also uses another new field in the target environment to signal to it that there is a waiting IPC.

```
struct Env {
	...
	struct PageInfo *env_ipc_page;
	uint32_t env_ipc_value_sending;
	unsigned env_ipc_perm_sending;
	struct Env *env_ipc_blocked_sender;
	struct Env *env_ipc_blocked_sender_chain;
}

If `sys_ipc_recv` is called and there is a waiting IPC, `sys_ipc_recv` completes the IPC by grabbing the stored values from the source environment and storing them in the target environment. In this way, `sys_ipc_recv` is taking on some of the functionality of the former `sys_ipc_try_send`. 

When the IPC is complete, `sys_ipc_recv` sets the source environment as runnable and alters its Trapframe so that `sys_ipc_send` returns the correct value.

The first of `sys_ipc_recv` / `sys_ipc_send` that is called (for a given source/target pair) will always be the one that blocks, and the second that is called will not block at all. Again, this is different from the original scenario, where `sys_ipc_recv` always had to be called first, and would always block.

To handle multiple source environments all trying to send different IPCs to a single target, I used another new Env field that keeps a linked list of all environments that are waiting to send to a particular target environment. When `sys_ipc_send` is called, this list (if `sys_ipc_recv` isn't blocked) is appended to.

When `sys_ipc_recv` is called and this list is non-empty, the first environment is popped from the head and its IPC is retrieved, and the second queued environment moves to the head of the list. All of the environments in this list are currently blocked, waiting to send an IPC. A receiving environment will only block if this list is empty when `sys_ipc_recv` is called.
