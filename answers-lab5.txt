# Lab 5 - Rayden Y. Chia

Q1. 	Nothing else needs to be done in order to ensure this privilege 
gets preserved as we switch from one environment to another. There's no 
danger that this flag somehow 'leaks' to other processes. When 
switching from the file system environment to another environment, the 
two trapframes are completely separate. If the file system environment 
forks, then the child would inherit the EFLAGS register value and hence 
the I/O privilege. That is acceptable because presumably the kernel 
trusts the file system environment not to fork off a malicious child. A 
random user environment cannot set this flag by itself because it is 
running at CPL 3 and the CPU only lets processes running at CPL 0 edit 
the EFLAGS register.

Challenge

I implemented UNIX-style exec - it was not easy to do a user-level exec.

We cannot replace memory in use, so I created a temporary region to 
read and store information needed and use a system call to finish the 
replacement. ETEMPREGION is defined in inc/csa.h as 0xe0000000 
which is the address of our temporary region.

exec is similar to spawn, but modified to be aware
of ETEMPREGION: 

```
	uint32_t tmp = ETEMPREGION;
	ph = (struct Proghdr*) (elf_buf + elf->e_phoff);
	for (i = 0; i < elf->e_phnum; i++, ph++) {
		if (ph->p_type != ELF_PROG_LOAD)
			continue;
		perm = PTE_P | PTE_U;
		if (ph->p_flags & ELF_PROG_FLAG_WRITE)
			perm |= PTE_W;
		if ((r = map_segment(0, PGOFF(ph->p_va) + tmp, ph->p_memsz,
				     fd, ph->p_filesz, ph->p_offset, perm)) < 0)
			goto error;
		tmp += ROUNDUP(ph->p_memsz + PGOFF(ph->p_va), PGSIZE);
	}
```

sys_exec was then implemented in kern/syscall.c and lib/inc.h, 
lib/syscall.h, lib/syscall.c was also edited to include the new syscall.

execl copies from spawnl but uses init_stack_with_addr (defined in 
lib/spawn.c) instead of init_stack to support use of ETEMPREGION.

I modified user/spawnhello.c to use execl instead of spawnl and got:

```
...
i am parent environment 00001001
FS is running
FS can do I/O
Device 1 presence: 1
block cache is good
superblock is good
bitmap is good
alloc_block is good
file_open is good
file_get_block is good
file_flush is good
file_truncate is good
file rewrite is good
tf_esp: 0
stack: e0007000
hello, world
i am environment 00001001
...
```

The last line indicates that env_id of hello is 00001001 instead of 
00001002 and hence the implementation of UNIX-exec is successful.
