Lab 3 Answers - Rayden Y. Chia

Q1.     The purpose of having an individual handler function for each exception
        and interrupt we have is due to error codes. As of now, depending on the
        error, we will either push 0 or an error code. We have two different
        trapframe macros. If all exceptions and interrupts were delivered to the
        same handler, we would have to do slightly more work in the one trapframe
        to decide whether to push 0 or the error code, which would make the code
        slightly messier.

        In addition, different interrupt handlers let you access different pieces
        of code when returning. Having different interrupt handlers provides this
        accessibility that a single handler would not.

Q2.     Nothing was needed to be done. This happens because for interrupt vector 14
        we don't have the permissions, so the general protection trap is triggered
        in place of the one the user wanted to trigger. We do not want to allow
        users to invoke exceptions of their choice. If the kernel actually allows
        the int 14 instruction to invoke the kernel's page fault handler in softint,
        that means that the user could choose or know which exception handler would
        be thrown, allowing the user to manipulate what is on the stack and
        consequently what the kernel executes in ring0 - rendering CPL safety useless.

Q3.     I originally setup the IDT with the correct permissions (DPL=3) for the
        breakpoint interrupt. I was aware of this because while reading the IDT
        setup code in xv6 I noticed that the syscall interrupt gate was given
        different permissions (DPL=3) because it was expected to be invoked by
        user level code. If I had setup the breakpoint interrupt with DPL=0,
        like the other interrupts, then the `breakpoint` user code would have
        generated a general protection fault.

Q4.     The point of these mechanisms is to restrict the influence user level
        code can have on the kernel. User code can ask for services (syscalls),
        set breakpoints but cannot manipulate virtual memory (`int $14` in `softint`).


Challenge: Ex6 - Single Step using eflags->TF

	To enable the single stepping of instructions, I set the trap flag (`FL_TF`)
	flag in the `EFLAGS` register. I also added a case statement in
	`trap_dispatch` to catch `T_DEBUG` interrupts, which are the interrupts
	generated by the CPU when `FL_TF` is on.

	I added two functions to the JOS monitor: `step` and `continue`. The `step`
	function sets the `FL_TF` flag in the `tf_eflags` portion of the trapframe,
	which is what gets popped into the `EFLAGS` register once execution of the
	user process resumes. After a single instruction in the user process, the
	CPU interrupts with a `T_DEBUG`, which is caught in `trap_dispatch` and the
	user is dropped into the monitor once again. At this point, the user can
	`singlestep` again or execute a `continue` command, which turns off the
	`FL_TF` flag in `tf_eflags` and resumes execution of the user process until 
	it hits a breakpoint or completion.

	I tested my solution by looking at the `eip` in the trapframe at every break
	and making sure that it matched the next instruction in `obj/user/breakpoint.asm`.
